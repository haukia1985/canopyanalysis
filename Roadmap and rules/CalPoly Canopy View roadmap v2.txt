
# Canopy Cover Analysis App Development Roadmap version 2

## Project Overview
- **Goal**: Create a cross-platform (Mac & Windows) portable Python app to analyze % of canopy cover from photographs
**Users**: University researchers and students who are **not photo editing professionals**.
Approach needs to be simple and easy to follow and implement. Avoid unnecessary complications and focus on easy to deploy and debug code.
Use python unless some other language is required
Make it easy to modify and change, divide the project into clear modules where GUI, image analysis and masking are all separated as well as any other needed module.
Make sure the analysis part is possible to adjust and even implement fully different algorithms and LLM based solutions
See if existing script can be used as a basis of the project. Old scripts can be found in “Previous Scripts” folder and git hub at https://github.com/haukia1985/ResearchVision.git
Suggest if chosen approach is not the best and give other options.


**Core Functionality and features**: 
Simple GUI that allows user to navigate the whole analysis session.
  - Batch load images from a selected folder and show progress bar for analysis
- Each new session creates a time stamped output folder within the selected folder
 - use config.yaml file for thresholds and default values
Mask the area of analysis with a circular mask - use a default radius fraction of 0.25 with the center of the circle being the center of the image (Create a circular mask
    center = (w // 2, h // 2)
    radius = int(min(h, w) * 0.25)  # 25% of the smaller dimension
    mask = create_circular_mask(h, w, center, radius)

  - Pre-classify and tag images with **Bright, Medium, or Dark** exposure groups based on average brightness of the masked circular area. The exposure threshold values are in the config.yaml file and can be changed there.
  - Apply canopy detection to the masked area using parameters that are set for each exposure value in the config.yaml file 
create a binary mask where sky is blue and canopy is green based on each pixel in the analysis area
Create a secondary mask with values 5% over and under the threshold values with blue hue calculated as sky and green hue always calculated as canopy. This should give us a secondary mask that overlayed with the binary mask for approximate values.
 - Calculate number of pixels in the analysis area, and % of sky vs. canopy in the photo with secondary mask giving threshold values.
 - Overlay mask on the original image 
  - Preview the result one by one in the GUI with the mask overlayed on the original image and canopy vs sky values as well as exposure tag as well.
 - User can accept each result one by one OR choose to select result for manual changes 
Accepting a result outputs the image into the session output folder with result printed as png file where original, masked and overlayed images are presented along with image name and resulting values. The output png file is named after the original image with _output added in the end. These values are also saved as a CSV file 
Choosing to manually edit an image opens value thresholds as sliders that allows the user to adjust the values and live preview the resulting binary mask, choose a new center point by mouse clicking on the image (center point will move the circular area of analysis and mask) and paint in sky or canopy manually using standard brush which size one can change by pixel values 
After manual adjustments user can accept the manual changes - this outputs the image into the output folder and closes the threshold selections so that user can continue to either accept or manually adjust the results




## App File Structure (Planned)
```
CanopyApp/
│── app.py             # Main entry point
│── run.sh             # Mac/Linux startup script
│── run.bat            # Windows startup script
│── requirements.txt   # Dependencies
│── config.json        # User settings file
│
├── gui/               # User Interface
│   ├── main_window.py    # Main UI logic
│   ├── settings.py       # Adjustable settings UI
│   ├── results.py        # Display and export results
│
├── processing/        # Core Image Processing
│   ├── canopy_analysis.py  # Detect canopy cover
│   ├── sky_detection.py    # Identify sky in images
│   ├── utils.py            # Helper functions
│
├── models/            # AI Models (If used)
│   ├── ai_assistant.py    # Future AI integration
│
└── logs/              # Logging and debugging
```


File Formats & Exporting Results

### **CSV Export Format**
| Field | Description |
|-------|------------|
| `image_name` | Original image name |
| `center` | Center point selected for analysis |
| `total_pixels` | Pixels analyzed within the defined circular area |
| `sky_pixels` | Pixels classified as sky |
| `canopy_pixels` | Pixels classified as canopy |
| `canopy_density` | Ratio of canopy pixels to sky pixels |
| `exposure_category` | (Bright, Medium, Dark) based on thresholds |
| `manual_adjustment_flag` | (Yes/No) if manually adjusted |
| `error_status` | Log of processing issues, if any |

