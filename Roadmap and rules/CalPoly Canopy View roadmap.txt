
# Canopy Cover Analysis App Development Roadmap (Simplified)

## 1. Project Overview
- **Goal**: Create a cross-platform (Mac & Windows) portable Python app to analyze % of canopy cover from photographs
**Users**: University researchers and students who are **not photo editing professionals**.
Approach needs to be simple and easy to follow and implement. Avoid unnecessary complications and focus on easy to deploy and debug code.
Use python unless some other language is required
Make it easy to modify and change, divide the project into clear modules where GUI, image analysis and masking are all separated as well as any other needed module.
Make sure the analysis part is possible to adjust and even implement fully different algorithms and LLM based solutions
See if existing script can be used as a basis of the project 
Suggest if chosen approach is not the best 


**Core Functionality**: 
Simple and easy to understand GUI
  - Batch load images from a selected folder
  - Pre-classify images into **Bright, Medium, or Dark** exposure groups based on hardcoded brightness thresholds
- move the images to each selected folder
  - Apply canopy detection using exposure-based parameters - different set of parameters have been set for each exposure level but those can be tweaked by the user either before or after the initial analysis
  - Calculate % of sky vs. canopy in the photo
  - Display and export results as **a CSV file** and **processed images** where original, processed and combined images are portrayed along with canopy cover values 
  - Allow Fast preview of processed images in the GUI and selecting problematic images for **re-processing of problematic images**, including **manual adjustments** of threshold values, selection of center point and painting in the sky or canopy manually.

---

## 2. Core Features to Define & Map Out

| Feature | Description | Notes |
|---------|------------|-------|
| **Image Loading** | Load multiple images from a selected folder | |
| **Exposure-Based Pre-Classification** | Auto-group images based on brightness thresholds that can be changed if needed | Users can override grouping |
| **Canopy Detection** | Analyze sky vs. canopy within a defined circular area, default is 25% of the image size, circled around a center point | Uses adjustable threshold parameters |
| **Batch Processing** | Process each exposure group separately | Users can preview and reprocess individual images |  | **User Adjustments** | Adjust exposure group, tweak thresholds, and apply polygon-based corrections | |
| **Visualization** | Display original, masked, and final segmentation results | |
| **Result Export** | Save results as CSV and categorized images | |
| **Error Handling** | Log issues and allow reprocessing failed images | |
| **User Interface** | Simple GUI with file selection, processing options, and progress indication | |


---

## 3. App File Structure (Planned)
```
CanopyApp/
│── app.py             # Main entry point
│── run.sh             # Mac/Linux startup script
│── run.bat            # Windows startup script
│── requirements.txt   # Dependencies
│── config.json        # User settings file
│
├── gui/               # User Interface
│   ├── main_window.py    # Main UI logic
│   ├── settings.py       # Adjustable settings UI
│   ├── results.py        # Display and export results
│
├── processing/        # Core Image Processing
│   ├── canopy_analysis.py  # Detect canopy cover
│   ├── sky_detection.py    # Identify sky in images
│   ├── utils.py            # Helper functions
│
├── models/            # AI Models (If used)
│   ├── ai_assistant.py    # Future AI integration
│
└── logs/              # Logging and debugging
```

---

## 4. Steps to Follow

### **Phase 1: Setup & Basic Structure**
- [ ] Create a project folder and initialize it (`CalPoly Canopy View/`).
- [ ] Set up a **Python virtual environment** (`venv`) and install dependencies.
- [ ] Write a basic `app.py` that prints "Hello, CanopyApp!".
- [ ] Make `run.sh` and `run.bat` scripts for launching the app.

### **Phase 2: Integrate Existing Canopy Detection Code**
- [ ] Move the existing image processing code to `processing/canopy_analysis.py`.
- [ ] Test it independently (`process_image("test.jpg")`).
- [ ] Ensure it outputs correct canopy % results before moving to GUI.

### **Phase 3: Develop GUI (PySide6 or Tkinter)**
- [ ] Create a simple window with "Load Image" and "Process" buttons.
- [ ] Display selected image and processed results.
- [ ] Add sliders for **adjusting brightness and darkness thresholds**.

### **Phase 4: Implement Export & Logging**
- [ ] Enable results to be saved as `.csv` and categorized image folders.
- [ ] Implement **logging** to track errors and debugging.

### **Phase 5: Final Testing & Packaging**
- [ ] Ensure compatibility with **Mac and Windows**.
- [ ] Test the `run.sh` and `run.bat` scripts.
- [ ] Package the app into a **portable ZIP** for easy distribution.

---

## 5. User Experience & Manual Adjustments

- Users can press **E** to manually override an image's exposure category (**Bright, Medium, Dark**).  
- A **polygon selection tool** will be used for cases where auto-detection fails.  
- Users can adjust threshold settings for **sky vs. canopy** detection using **sliders**.  
- The app will batch-process each group but allow users to **reprocess individual images**.  
- Manually adjusted images will be **marked with an asterisk** in the CSV file.  
- The **reprocess queue** will be **manually triggered** via a "Reprocess Selected Images" button.  

---

## 6. Error Handling & Logging

- **Non-critical errors** will be **automatically ignored**, and processing will continue.  
- All errors will be **logged to a text file** inside the export folder.  
- Failed images will be **flagged**, and users will decide whether to retry.  
- If the app crashes, it will **not attempt to reload the session**.  
- No separate **debug mode** needed—**all errors will be logged** for troubleshooting.  

---

## 7. File Formats & Exporting Results

### **CSV Export Format**
| Field | Description |
|-------|------------|
| `image_path` | Original file path |
| `center` | Center point selected for analysis |
| `total_pixels` | Pixels analyzed within the defined circular area |
| `sky_pixels` | Pixels classified as sky |
| `canopy_pixels` | Pixels classified as canopy |
| `canopy_density` | Ratio of canopy pixels to total pixels |
| `exposure_category` | (Bright, Medium, Dark) based on hardcoded thresholds |
| `manual_adjustment_flag` | (Yes/No) if manually adjusted |
| `error_status` | Log of processing issues, if any |

### **Image Export**
- **Processed images will be saved in categorized folders** based on exposure (**Bright, Medium, Dark**).  
- **No need for transparency adjustments** or overlay toggles.  

---

## 8. Deployment & Usability

- Users will **run the app directly from the extracted folder** (no installer needed).  
- The app **does not need to remember last used input/output folders**.  
- Updates will be **manual downloads** (no update mechanism).  
- A **"Quick Mode"** will allow processing images with default settings.  
- A **simple progress indicator** will be displayed (text message or basic bar).  
- Deployment will be **the easiest solution to code**:  
  - On **Windows**, a **standalone `.exe` build** (if feasible).  
  - On **Mac**, a **runnable script or `.app` bundle**, depending on ease of implementation.  

---

## 9. Next Steps

1. **Download this document** and finalize any missing details.  
2. **Set up the project structure** and integrate existing code.  
3. **Begin coding Phase 1 (Basic App Setup)**.  

